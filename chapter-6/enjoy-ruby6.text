6 繰り返し
6.1 繰り返しの基本　パス
6.2 繰り返しで気をつける事
 繰り返しを止める条件を間違えるとy処理が終わらなくなったり、
 処理が終わってないのに繰り返しを抜ける可能性がある

6.3 繰り返しの実現方法 
 Rubyで繰り返しを行うには２つの方法がある
 1.繰り返しのための構文を使う
  Rubyに用意された繰り返しを行うための構文を使う
 2.メソッドを使用する
  メソッドにブロックを渡して、そのブロックの中に繰り返したい内容を書くことで繰り返せる。
  繰り返しのための構文に比べ、何らかの限定された目的に特化されている傾向がある。
  ・timesメソッド
  ・for文
  ・while文
  ・until文
  ・eachメソッド
  ・loopメソッド

6.4 timesメソッド
 単純に一定の回数だけ同じ処理をさせるメソッド

  繰り返したい回数.times do
   繰り返したい処理(文)
  end

 ブロック do ~ end の代わりに{ ~ }を使うこともできる
 繰り返したい回数.times{
  繰り返したい処理(文)
 }
 times.rb参照

 timesメソッドではブロックの中で繰り返している回数を知る事ができる
  繰り返したい回数.times do |ブロック変数|
   puts "#{ブロック変数}回目の変数"
  end
 処理内にあるブロック変数に繰り返されている回数が代入される
 times2.rb参照

 Rubyの繰り返し回数は0から始まる
 times2.rbの結果
 0回目の繰り返し
 1回目の繰り返し
 2回目の繰り返し
 3回目の繰り返し
 4回目の繰り返し

 1から始める場合は初期値として1を与えてそこから繰り返しを開始する
  繰り返したい回数.times do |ブロック変数|
   puts "#{ブロック変数+1}回目の変数"
  end
 times3.rb参照

6.5 for文
 for文も処理を繰り返すために使われます.
 forはメソッドではなく文法

  for 変数 in 開始時の数値..終了時の数値 do
  　繰り返したい処理
  end
 doは省略可能

 for.rb参照
 
 for文 timesメソッドと違い、開始時の値や終了時の値を自由に変更できる。
 変数formからtoまでの合計を計算をtimesメソッドを使用すると
  from = 10
  to = 20
  sum = 0
  (to - from +1).times do |i|
   sum  = sum + (i + from)
  end
  puts num

 for文で同じことを行う場合
  from =10
  to = 20
  sum = 0
   for i in from..tosum = sum + in
  end
  puts sum
 
  timesメソッドを使用するよりシンプルにかける

  sum = sum + i は
  sum += i と書くこともできる
  引き算や掛け算なども同じように省略できる
  a -= b
  a *= b
  
6.6 一般的なfor文
 一般的なfor文の構文は
  for 変数 in オブジェクト do
    繰り返したい処理
 end

 6.5の構文とこの構文は少し違い、 in　の後ろが異なっている
 .. または　... は範囲オブジェクトを作る記号

 for_names.rb参照

6.7 while文
 while文はどんなタイプの繰り返しにも使える単純な構文

 while 条件 do
    繰り返したい処理
 end

 条件が成り立っている間、繰り返し処理を実行し、条件が成り立たなくなると処理をやめる

 while.rb参照
 while2.rb参照

 for文で簡単にできることをwhile文でわざわざ行う必要なし
 while3.rbのような場合は別

6.8 until文
 if文に対してunless文があったように、while文に対してもuntil文がある
 until文は公文の見た目はwhile文と同じ
 条件の判断が逆で、条件を満たさない(偽)場合、処理を繰り返し
 条件を満たすと処理を終了する

 　until 条件 do
    繰り返したい処理
   end

 until.rb参照

 while文に 否定の演算子 ! を使用すれば同じ事ができる

 while_not.rb参照
 
 条件式が複雑な場合はuntil文、そうでない場合は比較演算子 ! を使用するのがよさげ

6.9 eachメソッド
 オブジェクトの集まりに足して、それを一つ一つ取り出す際によく使う

 each_namrs.rb参照

 eachメソッドの一般的な公文
  オブジェクト.each do |変数|
    繰り返したい処理
  end

  オブジェクト.each {|変数|
    繰り返したい処理
  }

 これと同じような処理を行うのが
  for 変数 in オブジェクト
    繰り返したい処理
  end

 for文はRubyの内部処理としてはeachメソッドが実行されている
 したがってeachメソッドを呼び出す事ができるオブジェクトであれば for文のin後に指定できる

 each.rb参照

6.10 loopメソッド
 終了条件がないただの繰り返しのためのメソッド
  loop do
    print 'Ruby'
  end
 などと書くと延々と処理が行われる
 loopメソッドを使用する場合、breakを使い繰り返しを途中で抜ける

6.11 繰り返しの制御
 繰り返しの途中で処理を中断したり、処理を次の回に飛ばすときに、その繰り返しを制御するための命令がある
  break: 繰り返しを中断し、繰り返しの中から抜ける
  next : 次の回の繰り返しに処理を移す
  redo : 同じ条件の繰り返しをやり直す

  
6.11.1 break
 breakは繰り返し全体を中断
 break_next.rb参
 ten_line_grep.rb参照

6.11.2 next
 nextは繰り返しの中でnext以降の部分を飛ばして次の会に処理を飛ばす
 以下参照 
 break_next.rb
 strip.rb
 hello.rb
 stripped_hello.rb

おまけ
 do~end {~}の違い
 do ~ end 複数行にわたって処理を描く時
 {~}      1行に処理を描く時

 10.times do |i|
  puts i
 end

 10.times {|i| puts i}

 見やすさの問題






 
