6 繰り返し
6.1 繰り返しの基本　パス
6.2 繰り返しで気をつける事
 繰り返しを止める条件を間違えるとy処理が終わらなくなったり、
 処理が終わってないのに繰り返しを抜ける可能性がある

6.3 繰り返しの実現方法 
 Rubyで繰り返しを行うには２つの方法がある
 1.繰り返しのための構文を使う
  Rubyに用意された繰り返しを行うための構文を使う
 2.メソッドを使用する
  メソッドにブロックを渡して、そのブロックの中に繰り返したい内容を書くことで繰り返せる。
  繰り返しのための構文に比べ、何らかの限定された目的に特化されている傾向がある。
  ・timesメソッド
  ・for文
  ・while文
  ・until文
  ・eachメソッド
  ・loopメソッド

6.4 timesメソッド
 単純に一定の回数だけ同じ処理をさせるメソッド

  繰り返したい回数.times do
   繰り返したい処理(文)
  end

 ブロック do ~ end の代わりに{ ~ }を使うこともできる
 繰り返したい回数.times{
  繰り返したい処理(文)
 }
 times.rb参照

 timesメソッドではブロックの中で繰り返している回数を知る事ができる
  繰り返したい回数.times do |ブロック変数|
   puts "#{ブロック変数}回目の変数"
  end
 処理内にあるブロック変数に繰り返されている回数が代入される
 times2.rb参照

 Rubyの繰り返し回数は0から始まる
 times2.rbの結果
 0回目の繰り返し
 1回目の繰り返し
 2回目の繰り返し
 3回目の繰り返し
 4回目の繰り返し

 1から始める場合は初期値として1を与えてそこから繰り返しを開始する
  繰り返したい回数.times do |ブロック変数|
   puts "#{ブロック変数+1}回目の変数"
  end
 times3.rb参照

6.5 for文
 for文も処理を繰り返すために使われます.
 forはメソッドではなく文法

  for 変数 in 開始時の数値..終了時の数値 do
  　繰り返したい処理
  end
 doは省略可能

 for.rb参照
 
 for文 timesメソッドと違い、開始時の値や終了時の値を自由に変更できる。
 変数formからtoまでの合計を計算をtimesメソッドを使用すると
  from = 10
  to = 20
  sum = 0
  (to - from +1).times do |i|
   sum  = sum + (i + from)
  end
  puts num

 for文で同じことを行う場合
  from =10
  to = 20
  sum = 0
   for i in from..tosum = sum + in
  end
  puts sum
 
  timesメソッドを使用するよりシンプルにかける
  
  sum = sum + i は
  sum += i と書くこともできる
  引き算や掛け算なども同じように省略できる
  a -= b
  a *= b
  

