5.1 条件判断
 Rubyが生まれてからその年までの何年たったかを返すプログラムを作成
 ad2age.rb　参照
 実行結果
  ruby ad2age.rb 2020
  27
 
 このプログラムには、1993以前の年代を入力すると返す値が0やマイナスになる
 1993未満の年代を入力された場合は変換できない処理が必要
 そのために用意されているのが条件判断文
 主に3種類
 ・if文
 ・unless文
 ・case文

5.2 Rubyでの条件
5.2.1 条件と真偽値
 比較演算子は 等号 == 不等号 > <　のこと　結果はtrue false の２つ
 結果が正しいときはtrue 間違っている場合はfalseを返す
 他にもたくさん条件を表すメソッドがある
 empty? 文字列クラスのメソッド　文字列の長さが0の時はtrue、そうでない時はfalseを返す
  irb(main):001:0> p "".empty?
  true
  => true
  irb(main):002:0> p "xxx".empty?
  false
  => false
 
 trueかfalse以外にも条件判断に使える値がある
 正規表現でのマッチングはマッチした場合には文字列中のマッチした部分の位置を返し、
 マッチしなければnilを返す。
  irb(main):003:0> p /Ruby/ =~ "Ruby"
  0
  => 0
  irb(main):004:0> p /Ruby/ =~ "xxx"
  nil
  => nil
 
 Rubyの真偽値は
  真 falseとnilを除く全て
  偽 falseとnil
  
  true  真の代表値
  false 偽の代表値
 
 true,falseを返さないメソッドでもnilを返すメソッドであれば条件判断に使用できる。
 なお真偽値を返すメソッドの名前は末尾に?をつけるルールがあるので、自分でメソッドを作成する場合はこのルールに合わせる。

5.3　論理演算子
 論理演算子 && ||は複数の条件を１つにまとめる時に使う
  条件1 && 条件2
 こちらはどちらの条件も真である場合に全体も真となり、どちらか一方でも偽の場合、全体も偽となる
  例　x が1から10の間の場合
  x = 3
  irb(main):002:0> if x >= 1 && x <= 10
  irb(main):003:1> p "yea"
  irb(main):004:1> else
  irb(main):005:1> p "nooo"
  irb(main):006:1> end
  "yea"
  => "yea"
 
  条件1 || 条件2
 こちらは条件1、条件2のどちらかが真であれば全体も真になる
  例 x が1から10の間以外
  x = 3
  irb(main):007:0> if x < 1 || x > 10
  irb(main):008:1> p "yea"
  irb(main):009:1> else
  irb(main):010:1> p "n"
  irb(main):011:1> end
  "n"
  => "n"
 
 また、否定の論理演算子 !条件もあり、これは条件を反転させる
 つまり条件が偽であれ場合は真に、条件が真であれば偽になる
 
 条件判断はプログラムの制御を行う重要な部分なので、そこで行いたいことが
 できるだけ分かりやすい条件を書くことが望ましい

 && || と同じ意味でより優先度の低い and or not　がある

5.4 if文
 if文の単純な公文は
  if 条件 then
    文
  end

 さらに条件(elsif else)を書き加えると
  if 条件 then (条件1)
    文1
  elsif then (条件2)
    文2
  elsif then (条件3)
    文3
  else (全て当てはまらない)
    文4
  end

 といった形になる
 条件は上から順に判定されていくので、条件1が真ならば文1、条件1が偽で条件2が真の場合
 文2が表示されというのを順に行い、全てが偽の場合は文4が表示される
 if_elsif.rb参照

5.5 unless文
 if文と反対の役割をする条件判断文
  unless 条件 then
    文
  end
 といった構成
 if文では条件がtrueの時に文を表示していたが、unless文は条件がfalseの時に
 文を実行する
 unless.rb参照

5.6 case文
 条件がいくつもある場合はif elsifとの組み合わせでそれぞれの条件をかけるが、
 比較したいおジェクトが一つだけでそのオブジェクトの値によって場合分したい場合はcase文の方がわかりやすい。

 case 比較したいオブジェクト
 when 値1 then
   文1
 when 値2 then
   文2
 when 値3 then
   文3
 else
   文4
 end
  case.rb参照
  case_class.rb参照
 
5.7 if修飾子とunless文
 ifやunlessは
  puts "aよりbのほうがが大きい" if a > b
 のように実行したい処理の後ろに書くこともできる.
  if a > b
   puts "aよりbのほうがが大きい" if a > b
  end
 これと同じ意味になる。
   



