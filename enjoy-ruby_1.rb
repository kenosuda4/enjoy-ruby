print ("Hello, Ruby.\n")
# バックスラッシュはoption+¥
puts "100" #=> 100

# 1.3.1
print("hello, \"Ruby\".\n")
# \n←改行　\←これ自体は文字列内に特殊な文字を埋め込む際に使用する。
# \これ自体を埋め込む場合は \\ と記述
# 例
print("hello, \\ \"Ruby\".\n")

# 1.3.2
# シングルクォートは中の特殊文字の解釈を行わずそのまま表示させる
print('hello, \\ \'Ruby\'.\n' "\n")
# 出力結果
# hello, \ 'Ruby'.\n

# 1.4
# rubyのメソッドでは()を省略できる
print "Hello, Ruby.\n" #=> Hello, Ruby.

# 1.5
# putsメソッドはprintメソッドと違い、必ず末尾で開業するメソッド
puts "Hello, Ruby."
# ただし、下のように書くとそれぞれの末尾に自動で改行が入るので注意
puts "Hello,", "Ruby."

# 1.6 pメソッド
# pメソッドはprint,putsと違い数字と文字列を判別して表示してくれる
puts 100 # => 100
puts "100" # => 100
p "100" # => "100"
p 100 # => 100

# 1.7 日本語の表示
=begin 
 環境によっては日本語を含むスクリプトを実行すると invalid multibyte char (utf-8)とエラーが起きる
 ソースコードの文字コード(エンコーディング)が指定されていないから
 Rubyの場合、[# encoding: 文字コード]というコメントを1行めに記述することでソースコードの文字コードを指定できる。これをマジックコメントと呼ぶ。
 kiritsubo.rbの場合
 encoding: Shift_JIS
 print "いずれの御時にか女御更衣あまたさぶらいたまいけるなかに\n"
 print "いとやむごとなき際にはあらぬがすぐれて時めきたまふありけり\n"
  と指定できる
 pメソッドで実行すると文字化けすることがあるので、実行する際に　-E 文字コードをオプションでつけることにより解消可能
=end

#1.8.数値の表示
# 1.8.1
=begin 
 rubyでは文字列は文字列オブジェクト、数字は整数オブジェクトとして扱われる
 1ならば1という値の整数（integer）整数オブジェクトになります。
 3.1415と書くと3.1415の値の不動小数点(float)オブジェクトになる
=end

puts(10)
# 1.8.2　四則演算 ここはパス
# 1.8.3 数学的な関数
# 四則演算以外の指数関数などの数学的関数を行う場合は、Math. という文字列が必要
p Math.sin(3.1415) #=> 9.265358966049026e-05
# この計算結果を戻り値という

# 1.9　変数
# 変数名=オブジェクト名
name = "nosuke"
like = "swimming"
puts name
p like

# area_volume.rb参照　変数を使うことにより、プログラムの修正を行う際の修正箇所を減らせる
#　変数名は、その変数が何に関する物なのかなるべく分かりやすくする
# そのままの単語の意味で伝わるようにする

# 1.9,1
=begin プログラム中にコメントを記述できる
 コメントを表す記号は#
 行の先頭にあればその行を丸ごと、途中にあれば#以降の部分がコメントになる
 または =begin と =endで囲まれた部分もコメントにできる
=end

# print "表面積=", area, "\n"
area = 6500
print "表面積=#{area}\n"
puts "表面積=#{area}"

# 1.11条件判断 :if ~ then ~ end
=begin 
 プログラムは上から順に実行だが、そのように実行したくない場合もある
 ・計算結果が＋の数値の時はa、−かゼロの場合はbのように実行したい場合
 ・同じ処理を10回繰り返したい場合
 このようなプログラムの実行順序を変えたり、一部を実行させなくする仕掛けを制御構造と言う。
 if 条件 then
    条件が成り立った時に実行したい処理
 end
 条件によって挙動が変わるプログラムを書く場合はif分を使う
 条件には値がtrue、またはfalseになる式を書くのが一般的。
 二つの値を比較し、当てはまる方をtrue、当てはまらない方をflaseとする
 数値の場合、例えば大小関係のひっかうにが等号や不等号を使う
 = は代入のための記号として使われるので、一致するかどうかを確認する時は =　を二つ並べた
 ==　を使い、 ≧　や≤　は　 <= >= を使う
 このような比較の結果はtrueまははfalseとなる。
 trueは条件が成り立っている場合、falseは成り立っていない場合

 条件が一致していない場合の時に違う動作をさせたい場合はこのようになります。

 if 条件 then
    条件がなる立つ場合の処理
 else
    条件が成り立たない場合の処理
 end
 *greater_samller_ekse.rb参照
=end

# 1.12繰り返し
# 1.12.1 while文
=begin 
 while文は繰り返しを行うための基本的な構文
 while　繰り返し条件 do
    繰り返したい処理
 end
 doは省略可能
 
=end
# 1から10までを繰り返す処理
i = 1
while i <= 10
    print i, "\n"
    i = i + 1
end

# 1.12.2 timesメソッド
=begin
 繰り替えしの回数が決まっでいる場合はtimesメソッドを使うとシンプルにできる
 こちらはdoの省略ができない。
  繰り返す回数.times do
    繰り返したい処理
  end
=end

10.times do
    print "Enjoy Ruby \n"
end

=begin
 timesメソッドはイテレータと呼ばれるメソッド
 イテレータは(iterator)はRubyの特徴的な機能
 繰り返す(iterate)もの(or)という意味
 Rubyにはtimesメソッド以外にもeachなど数多くのイテレータがある。
=end