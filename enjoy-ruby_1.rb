print ("Hello, Ruby.\n")
# バックスラッシュはoption+¥
puts "100" #=> 100

# 1.3.1
print("hello, \"Ruby\".\n")
# \n←改行　\←これ自体は文字列内に特殊な文字を埋め込む際に使用する。
# \これ自体を埋め込む場合は \\ と記述
# 例
print("hello, \\ \"Ruby\".\n")

# 1.3.2
# シングルクォートは中の特殊文字の解釈を行わずそのまま表示させる
print('hello, \\ \'Ruby\'.\n' "\n")
# 出力結果
# hello, \ 'Ruby'.\n

# 1.4
# rubyのメソッドでは()を省略できる
print "Hello, Ruby.\n" #=> Hello, Ruby.

# 1.5
# putsメソッドはprintメソッドと違い、必ず末尾で開業するメソッド
puts "Hello, Ruby."
# ただし、下のように書くとそれぞれの末尾に自動で改行が入るので注意
puts "Hello,", "Ruby."

# 1.6 pメソッド
# pメソッドはprint,putsと違い数字と文字列を判別して表示してくれる
puts 100 # => 100
puts "100" # => 100
p "100" # => "100"
p 100 # => 100

# 1.7 日本語の表示
# 環境によっては日本語を含むスクリプトを実行すると invalid multibyte char (utf-8)とエラーが起きる
# ソースコードの文字コード(エンコーディング)が指定されていないから
# Rubyの場合、[# encoding: 文字コード]というコメントを1行めに記述することでソースコードの文字コードを指定できる。これをマジックコメントと呼ぶ。
# kiritsubo.rbの場合
# encoding: Shift_JIS
print "いずれの御時にか女御更衣あまたさぶらいたまいけるなかに\n"
print "いとやむごとなき際にはあらぬがすぐれて時めきたまふありけり\n"
# と指定できる
# pメソッドで実行すると文字化けすることがあるので、実行する際に　-E 文字コードをオプションでつけることにより解消可能

#1.8.数値の表示
# 1.8.1
# rubyでは文字列は文字列オブジェクト、数字は整数オブジェクトとして扱われる
# 1ならば1という値の整数（integer）整数オブジェクトになります。
# 3.1415と書くと3.1415の値の不動小数点(float)オブジェクトになる

puts(10)
# 1.8.2　四則演算 ここはパス
# 1.8.3 数学的な関数
# 四則演算以外の指数関数などの数学的関数を行う場合は、Math. という文字列が必要
p Math.sin(3.1415) #=> 9.265358966049026e-05
# この計算結果を戻り値という
# 1.9　変数
# 変数名=オブジェクト名
name = "nosuke"
like = "swimming"
puts name
p like

# area_volume.rb参照　変数を使うことにより、プログラムの修正を行う際の修正箇所を減らせる

