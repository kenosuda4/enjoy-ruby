7.1 メソッドの呼び出し
7.1.1 単純なメソッドの呼び出し
 メソッドの呼び出しは
  オブジェクト.メソッド(引数1, 引数2, 引数3)
 といった形
 メソッドの後ろに()で囲まれたメソッドの引数が並ぶ ()は省略可能
 オブジェクトはレシーバとも呼ばれる
 オブジェクト指向の世界ではメソッドを実行することをオブジェクトにメッセージを送るという
 その結果としてオブジェクトはメッセージを受け取ると考えるから
 メソッドのパラメーター＝メソッドの引数
7.1.2 ブロック月メソッド呼び出し
 ブロックをともない呼び出されるメソッドをブロック付きメソッドと呼ぶ
 do ~ end {~} の部分がブロック
 　オブジェクト.メソッド(引数...) do
    ブロックの内容(処理)
   end
 ブロックの最初の||で指定された変数はブロック変数、ブロックパラメータと呼ばれる
 パラメータの値や数はメソッドによりことなる

7.1.3 演算子の形式のメソッド呼び出し
 四則演算などの2項演算子や -（マイナス)などの単項演算子、配列やハッシュの要素を添字でしてする[]
 などもメソッド
  obj + arg1
  obj =~ arg1
  -obj

 それぞれ obj　がレシーバ、arg1が引数
7.2 メソッドの分類
 rubyのメソッドはレシーバによって3種類に分けられる
  インスタンスメソッド
  クラスメソッド
  関数的メソッド

7.2.1 インスタンスメソッド
 最も一般的なメソッド
 あるオブジェクトが(インスタンス)があった時にそのオブジェクトをレシーバとするメソッド
 のことをインスタンスメソッドと呼ぶ

7.2.2　クラスメソッド
 レシーバがインスタンスではなくクラスそのものだった場合、そのメソッドはクラスメソッドという
 インスタンスを作る場合にはクラスメソッドを作る
 Array.new 新しい配列を作る
 File.open("some_file") 新しくオブジェクトファイルを作成する
 Time.now 新しいTimeオブジェクトをつくる

7.2.3 関数的メソッド
 レシーバがないメソッドを関数的メソッドという
 本当にないわけではなく、省略されている

7.3 メソッドの定義
7.3.1 メソッド定義の構文
 メソッド定義の一般的構文は
  def メソッド名(引数1, 引数2...)
    実行したい処理
  end
 となる
 アンダースコア、数字が使用できるが数字で始めることはできない
 hello_with_name.rb参照
 
 引数にはデフォルト値を設定できる
 デフォルト値は引数を省略してメソッドを呼び出した時に使われる値
 引数名=値　と書く
 hello_with_default.rb参照

7.3.2 メソッドの戻り値
 メソッドの中でreturn文を使うことでメソッドの戻り値を指定できる
  return 値
 